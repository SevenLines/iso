<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf_blur_pass_k = 1;
surf_blur_pass = noone;
surf_bloom = noone;
surf_second = noone;


u_scale = shader_get_uniform(shd_Blur, 'u_Scale');
u_threshould = shader_get_uniform(shd_Threshold, 'u_Threshold');
u_threshold_mask = shader_get_sampler_index(shd_Threshold, 'u_Mask');


sld_Red = instance_create(0, 0, obj_gui_slider);
sld_Green = instance_create(0, 0, obj_gui_slider);
sld_Blue = instance_create(0, 0, obj_gui_slider);

sld_Blue.modificator = 200;
sld_Blue.modificator_offset = -100;
sld_Blue.step = 0;
sld_Blue.value = 0.5;

sld_Green.modificator = 200;
sld_Green.modificator_offset = -100;
sld_Green.bottom = 70;
sld_Green.step = 0;
sld_Green.value = 0.5;

sld_Red.modificator = 360;
sld_Red.bottom = 120;
sld_Red.step = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour_write_enable(true, true, true, true);

graphics_controller_create_surfaces(false);

if (graphic_loom_enabled) {
    surface_set_target(surf_blur_pass);
        draw_clear_alpha(c_black, 0);
        with(obj_Water) {
            draw_sprite_on_surface(global.zoom_k, c_white, 0);
        }
        with(obj_Crystal_base) {
            draw_sprite_on_surface(global.zoom_k, c_white, 0);
        }
    surface_reset_target();
      
    shader_set(shd_Threshold) 
        shader_set_uniform_f(u_threshould, 0.8);
        texture_set_stage(u_threshold_mask, 
            surface_get_texture(surf_blur_pass));
            
        surface_set_target(surf_bloom);
        draw_surface_ext(
            application_surface,
            0, 0, 1 / surf_blur_pass_k, 1 / surf_blur_pass_k,
            0, c_white, 1);
        surface_reset_target();
    shader_reset();
    
    shader_set(shd_Blur)
        shader_set_uniform_f(u_scale, 0, 0.01);
        surface_set_target(surf_blur_pass);
            draw_surface(surf_bloom, 0, 0);
        surface_reset_target();
    shader_reset();
    
    shader_set(shd_Blur)
        shader_set_uniform_f(u_scale, 0.01, 0);
        surface_set_target(surf_bloom);
            draw_surface(surf_blur_pass, 0, 0);
        surface_reset_target();
    shader_reset();
}

u_color_offset = shader_get_uniform(shd_Night, 'color_offset');
shader_set(shd_Night);
    shader_set_uniform_f(u_color_offset,
         sld_Red.value,
         sld_Green.value * 2 - 1,
         sld_Blue.value * 2 - 1
    );
    draw_surface_ext(
        application_surface, 0, 0,
        1,
        1,
        0,
        c_white,
        1  
    );    
shader_reset();



if (graphic_loom_enabled) {
    draw_set_blend_mode(bm_add);
    draw_surface_ext(surf_bloom, 0, 0, 
                    surf_blur_pass_k, surf_blur_pass_k, 
                    0, c_white, 1);
    draw_set_blend_mode(bm_normal);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour_write_enable(true, true, true, false)

if view_wport[0] != display_get_gui_width() {
    view_wport[0] = display_get_gui_width();
    view_wview[0] = view_wport[0] * global.zoom_k;
}

if view_hport[0] != display_get_gui_height() {
    view_hport[0] = display_get_gui_height();
    view_hview[0] = view_hport[0] * global.zoom_k;
}

if view_wport[0] != surface_get_width(application_surface) 
    || view_hport[0] != surface_get_height(application_surface)
{
    surface_resize(application_surface, view_wport[0],view_hport[0]);
    graphics_controller_create_surfaces(true);
    gui_update_positions(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
